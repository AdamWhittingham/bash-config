# Command Aliases
alias psg='ps -ef|grep '
alias sshp='ssh -o"PreferredAuthentications=password"'
alias ack='ack-grep'

## ls aliases
alias l='ls -CF'
alias la='ls -A'
alias ll='ls -alF'
alias lh='ls -alFh'

## apt-get aliases
alias sai='sudo apt-get install'
alias sar='sudo apt-get remove'
alias saar='sudo apt-get autoremove'
alias sau='sudo apt-get update'
alias saup='sudo apt-get upgrade'

## Ruby aliases
alias cucumber='bundle exec cucumber --color'
alias guard='bundle exec guard'
alias rake='bundle exec rake'
alias rspec='bundle exec rspec --color'

## Git aliases
alias g='git'
alias ga='git add'
alias gaa='git add -A'
alias gb='git blame -CCC'
alias gc='git commit'
alias gcaa='git commit -a --amend -CHEAD'
alias gd='git diff'
alias gdw='git diff --word-diff'
alias gcl='git clean -fd'
alias gco='git checkout'

alias gl='git_pretty_log'
alias gld='git log -p'
alias gls='git shortlog -sn'
alias gst='git status -sb'

## Dev aliases
alias prp='git pull && rake && git push'
alias filecomp='file_composition'

## tmux aliases
alias tmux='tmux -2' #launch tmux in 256 colours
alias tl='tmux ls'
alias tls='tmux ls'
alias tm='tmux_create_or_attach'
alias tma='tmux_new_attach_to_session'

## Proxy aliases
alias p='source /etc/profile.d/proxy'
alias np='unset http_proxy https_proxy HTTP_PROXY HTTPS_PROXY'

## Super lazy-time update functions
alias up-vim='git-update ~/.vim'
alias up-bash='git-update ~/.bash-config'
alias up-tmux='git-update ~/.tmux-config'
alias up-all='up-vim && up-bash && up-tmux'

# Bind extra keys
## Bind UpArrow and DownArrow to search to autocomplete the current command
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'

## Bind PgUp and PgDown to scoll through history
bind '"\e[5~": previous-history'
bind '"\e[6~": next-history'

# Configure extra things
## Extra Git config
git config --global alias.meld !~/.bash-config/git-meld.pl
git config --global branch.autosetuprebase always
git config --global color.ui auto
git config --global push.default current

#Tmux Functions
function tmux_create_or_attach(){
  session="$1"
  if [[ ! $(tmux has-session -t "$session" &>/dev/null) ]] ; then
    tmux new -s "$session" -d
  fi
  tmux attach -t "$session"
}

function tmux_new_attach_to_session(){
  session="$1"
  counter=0
  while (tmux has-session -t "${session}_${counter}") ; do
    counter=$[$counter +1]
    echo $counter
  done
  tmux new-session -s "${session}_${counter}" -t "${session}"
}

# Extra Useful Functions
function file_composition {
  find . -type f | perl -n -e'/(\.\w+$)/ && print "$1\n"' | sort | uniq -c | sort -n
}

function source_if_present(){
  local file="$1"
  [[ -f $file ]] && source "$file"
}

function git-update {
  local updir=$1
  echo "git pull (in $updir)"
  if pushd $updir >/dev/null ; then
    git pull
    popd >/dev/null
  fi
}

function seconds_to_time_str {
  local secs="$1"
  printf "%dh %dm %ds" $((${secs}/3600)) $((${secs}%3600/60)) $((${secs}%60)) | grep -o "[1-9].*$"
}

function seconds_to_minutes {
  local secs="$1"
  echo "$((${secs}/60))"
}

# Colour Vars
bold="$(tput bold)"
reset="\001$(tput sgr0)\002"

blue="\001$bold$(tput setaf 4)\002"
cyan="\001$bold$(tput setaf 6)\002"
green="\001$bold$(tput setaf 2)\002"
purple="\001$bold$(tput setaf 5)\002"
red="\001$bold$(tput setaf 1)\002"
white="\001$bold$(tput setaf 7)\002"
yellow="\001$bold$(tput setaf 3)\002"

# Prompt Colour Functions
function user_colour {
  local colour=$green
  if [[ $(id -u) == 0 ]]; then
    colour=$red
  fi
  echo $colour
}

function colour_for_minutes {
  local minutes="$1"
  local colour=$green
  if [[ $minutes -gt 30 ]]; then colour=$red
    elif [[ $minutes -gt 15 ]]; then colour=$yellow
  fi
  echo -e "$colour"
}

# Git Prompt Niceness
function git_working_changed {
  git diff --quiet 2> /dev/null
  if [[ $? == 0 ]]; then return 1; else return 0; fi
}

function git_staging_changed {
  git diff --cached --quiet 2> /dev/null
  if [[ $? == 0 ]]; then return 1; else return 0; fi
}

function git_changed {
  $(git_working_changed) || $(git_staging_changed)
}

function git_branch {
  echo "$(__git_ps1 "%s")"
}

function git_seconds_since_commit {
  now=`date +%s`
  local last_commit=`git log --pretty=format:'%at' -1`
  local seconds=$((now-last_commit))
  echo $seconds
}

function git_mins_since_commit {
  echo "$(seconds_to_minutes $(git_seconds_since_commit))"
}

function git_branch_colour {
  local colour=$blue
  if $(git_changed) ; then
    local minutes_since_commit="$(git_mins_since_commit)"
    colour=$(colour_for_minutes $minutes_since_commit)
  fi
  echo -e $colour
}

git_prompt() {
  if [ -n "$(__gitdir)" ]; then
    echo -e "$(git_branch_colour)($(git_branch))"
  fi
}

# Git Log Niceness
_I_=' '
HASH="%C(green)%h%C(reset)"
AGE="%C(yellow)%ar%C(reset)"
AUTHOR="%C(bold blue)%an%C(reset)"
REFS="%C(bold red)%d%C(reset)"
COMMENT="%s"

FORMAT="$HASH$_I_$AGE$_I_$AUTHOR$_I_$REFS $COMMENT"

git_pretty_log() {
  git log --graph --decorate --pretty="tformat:${FORMAT}" $* |
  less -FXRS
}

# Load Extra Things
source_if_present "$HOME/.rvm/scripts/rvm"
source_if_present "$HOME/.bash-config/git-completion.sh"
source_if_present "$HOME/.bash-config/git-prompt.sh"

## Setup Proxy if set in profile.d
source_if_present "/etc/profile.d/proxy"

# Setup iTerm2 tab names
export PROMPT_COMMAND='echo -ne "\\033]0;$(basename ${PWD/#$HOME/~})\\007"'

# Git 'g' alias auto-completion fixes
bashdefault -o default -o nospace -F _git g 2>/dev/null || complete -o default -o nospace -F _git g
__git_complete g __git_main

# Force term type to stop all the stupidity in vim, tmux et. al. Not a good idea but fixes too many things not to do it for now.
export TERM=xterm-256color

# Get CLI file colors back in OS X
export CLICOLOR=1

# Setup Prompt
export PS2="-> "
export PS1="$(user_colour)\u$reset@$yellow\h$reset:$purple\W$reset\$(git_prompt)$reset$PS2"

### Bash Completion Wrapper ###
# Automatically add completion for all aliases to commands having completion functions
function alias_completion {
    local namespace="alias_completion"

    # parse function based completion definitions, where capture group 2 => function and 3 => trigger
    local compl_regex='complete( +[^ ]+)* -F ([^ ]+) ("[^"]+"|[^ ]+)'
    # parse alias definitions, where capture group 1 => trigger, 2 => command, 3 => command arguments
    local alias_regex="alias ([^=]+)='(\"[^\"]+\"|[^ ]+)(( +[^ ]+)*)'"

    # create array of function completion triggers, keeping multi-word triggers together
    eval "local completions=($(complete -p | sed -Ene "/$compl_regex/s//'\3'/p"))"
    (( ${#completions[@]} == 0 )) && return 0

    # create temporary file for wrapper functions and completions
    rm -f "/tmp/${namespace}-*.tmp" # preliminary cleanup
    local tmp_file="$(mktemp "/tmp/${namespace}-${RANDOM}.tmp")" || return 1

    # read in "<alias> '<aliased command>' '<command args>'" lines from defined aliases
    local line; while read line; do
        eval "local alias_tokens=($line)" 2>/dev/null || continue # some alias arg patterns cause an eval parse error
        local alias_name="${alias_tokens[0]}" alias_cmd="${alias_tokens[1]}" alias_args="${alias_tokens[2]# }"

        # skip aliases to pipes, boolan control structures and other command lists
        # (leveraging that eval errs out if $alias_args contains unquoted shell metacharacters)
        eval "local alias_arg_words=($alias_args)" 2>/dev/null || continue

        # skip alias if there is no completion function triggered by the aliased command
        [[ " ${completions[*]} " =~ " $alias_cmd " ]] || continue
        local new_completion="$(complete -p "$alias_cmd")"

        # create a wrapper inserting the alias arguments if any
        if [[ -n $alias_args ]]; then
            local compl_func="${new_completion/#* -F /}"; compl_func="${compl_func%% *}"
            # avoid recursive call loops by ignoring our own functions
            if [[ "${compl_func#_$namespace::}" == $compl_func ]]; then
                local compl_wrapper="_${namespace}::${alias_name}"
                    echo "function $compl_wrapper {
                        (( COMP_CWORD += ${#alias_arg_words[@]} ))
                        COMP_WORDS=($alias_cmd $alias_args \${COMP_WORDS[@]:1})
                        $compl_func
                    }" >> "$tmp_file"
                    new_completion="${new_completion/ -F $compl_func / -F $compl_wrapper }"
            fi
        fi

        # replace completion trigger by alias
        new_completion="${new_completion% *} $alias_name"
        echo "$new_completion" >> "$tmp_file"
    done < <(alias -p | sed -Ene "s/$alias_regex/\1 '\2' '\3'/p")
    source "$tmp_file" && rm -f "$tmp_file"
};
